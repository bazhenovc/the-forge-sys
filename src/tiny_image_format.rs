/* automatically generated by rust-bindgen 0.59.1 */

pub const TinyImageFormat_Count: u32 = 239;
pub const TinyImageFormat_TinyImageFormat_UNDEFINED: TinyImageFormat = 0;
pub const TinyImageFormat_TinyImageFormat_R1_UNORM: TinyImageFormat = 1;
pub const TinyImageFormat_TinyImageFormat_R2_UNORM: TinyImageFormat = 2;
pub const TinyImageFormat_TinyImageFormat_R4_UNORM: TinyImageFormat = 3;
pub const TinyImageFormat_TinyImageFormat_R4G4_UNORM: TinyImageFormat = 4;
pub const TinyImageFormat_TinyImageFormat_G4R4_UNORM: TinyImageFormat = 5;
pub const TinyImageFormat_TinyImageFormat_A8_UNORM: TinyImageFormat = 6;
pub const TinyImageFormat_TinyImageFormat_R8_UNORM: TinyImageFormat = 7;
pub const TinyImageFormat_TinyImageFormat_R8_SNORM: TinyImageFormat = 8;
pub const TinyImageFormat_TinyImageFormat_R8_UINT: TinyImageFormat = 9;
pub const TinyImageFormat_TinyImageFormat_R8_SINT: TinyImageFormat = 10;
pub const TinyImageFormat_TinyImageFormat_R8_SRGB: TinyImageFormat = 11;
pub const TinyImageFormat_TinyImageFormat_B2G3R3_UNORM: TinyImageFormat = 12;
pub const TinyImageFormat_TinyImageFormat_R4G4B4A4_UNORM: TinyImageFormat = 13;
pub const TinyImageFormat_TinyImageFormat_R4G4B4X4_UNORM: TinyImageFormat = 14;
pub const TinyImageFormat_TinyImageFormat_B4G4R4A4_UNORM: TinyImageFormat = 15;
pub const TinyImageFormat_TinyImageFormat_B4G4R4X4_UNORM: TinyImageFormat = 16;
pub const TinyImageFormat_TinyImageFormat_A4R4G4B4_UNORM: TinyImageFormat = 17;
pub const TinyImageFormat_TinyImageFormat_X4R4G4B4_UNORM: TinyImageFormat = 18;
pub const TinyImageFormat_TinyImageFormat_A4B4G4R4_UNORM: TinyImageFormat = 19;
pub const TinyImageFormat_TinyImageFormat_X4B4G4R4_UNORM: TinyImageFormat = 20;
pub const TinyImageFormat_TinyImageFormat_R5G6B5_UNORM: TinyImageFormat = 21;
pub const TinyImageFormat_TinyImageFormat_B5G6R5_UNORM: TinyImageFormat = 22;
pub const TinyImageFormat_TinyImageFormat_R5G5B5A1_UNORM: TinyImageFormat = 23;
pub const TinyImageFormat_TinyImageFormat_B5G5R5A1_UNORM: TinyImageFormat = 24;
pub const TinyImageFormat_TinyImageFormat_A1B5G5R5_UNORM: TinyImageFormat = 25;
pub const TinyImageFormat_TinyImageFormat_A1R5G5B5_UNORM: TinyImageFormat = 26;
pub const TinyImageFormat_TinyImageFormat_R5G5B5X1_UNORM: TinyImageFormat = 27;
pub const TinyImageFormat_TinyImageFormat_B5G5R5X1_UNORM: TinyImageFormat = 28;
pub const TinyImageFormat_TinyImageFormat_X1R5G5B5_UNORM: TinyImageFormat = 29;
pub const TinyImageFormat_TinyImageFormat_X1B5G5R5_UNORM: TinyImageFormat = 30;
pub const TinyImageFormat_TinyImageFormat_B2G3R3A8_UNORM: TinyImageFormat = 31;
pub const TinyImageFormat_TinyImageFormat_R8G8_UNORM: TinyImageFormat = 32;
pub const TinyImageFormat_TinyImageFormat_R8G8_SNORM: TinyImageFormat = 33;
pub const TinyImageFormat_TinyImageFormat_G8R8_UNORM: TinyImageFormat = 34;
pub const TinyImageFormat_TinyImageFormat_G8R8_SNORM: TinyImageFormat = 35;
pub const TinyImageFormat_TinyImageFormat_R8G8_UINT: TinyImageFormat = 36;
pub const TinyImageFormat_TinyImageFormat_R8G8_SINT: TinyImageFormat = 37;
pub const TinyImageFormat_TinyImageFormat_R8G8_SRGB: TinyImageFormat = 38;
pub const TinyImageFormat_TinyImageFormat_R16_UNORM: TinyImageFormat = 39;
pub const TinyImageFormat_TinyImageFormat_R16_SNORM: TinyImageFormat = 40;
pub const TinyImageFormat_TinyImageFormat_R16_UINT: TinyImageFormat = 41;
pub const TinyImageFormat_TinyImageFormat_R16_SINT: TinyImageFormat = 42;
pub const TinyImageFormat_TinyImageFormat_R16_SFLOAT: TinyImageFormat = 43;
pub const TinyImageFormat_TinyImageFormat_R16_SBFLOAT: TinyImageFormat = 44;
pub const TinyImageFormat_TinyImageFormat_R8G8B8_UNORM: TinyImageFormat = 45;
pub const TinyImageFormat_TinyImageFormat_R8G8B8_SNORM: TinyImageFormat = 46;
pub const TinyImageFormat_TinyImageFormat_R8G8B8_UINT: TinyImageFormat = 47;
pub const TinyImageFormat_TinyImageFormat_R8G8B8_SINT: TinyImageFormat = 48;
pub const TinyImageFormat_TinyImageFormat_R8G8B8_SRGB: TinyImageFormat = 49;
pub const TinyImageFormat_TinyImageFormat_B8G8R8_UNORM: TinyImageFormat = 50;
pub const TinyImageFormat_TinyImageFormat_B8G8R8_SNORM: TinyImageFormat = 51;
pub const TinyImageFormat_TinyImageFormat_B8G8R8_UINT: TinyImageFormat = 52;
pub const TinyImageFormat_TinyImageFormat_B8G8R8_SINT: TinyImageFormat = 53;
pub const TinyImageFormat_TinyImageFormat_B8G8R8_SRGB: TinyImageFormat = 54;
pub const TinyImageFormat_TinyImageFormat_R8G8B8A8_UNORM: TinyImageFormat = 55;
pub const TinyImageFormat_TinyImageFormat_R8G8B8A8_SNORM: TinyImageFormat = 56;
pub const TinyImageFormat_TinyImageFormat_R8G8B8A8_UINT: TinyImageFormat = 57;
pub const TinyImageFormat_TinyImageFormat_R8G8B8A8_SINT: TinyImageFormat = 58;
pub const TinyImageFormat_TinyImageFormat_R8G8B8A8_SRGB: TinyImageFormat = 59;
pub const TinyImageFormat_TinyImageFormat_B8G8R8A8_UNORM: TinyImageFormat = 60;
pub const TinyImageFormat_TinyImageFormat_B8G8R8A8_SNORM: TinyImageFormat = 61;
pub const TinyImageFormat_TinyImageFormat_B8G8R8A8_UINT: TinyImageFormat = 62;
pub const TinyImageFormat_TinyImageFormat_B8G8R8A8_SINT: TinyImageFormat = 63;
pub const TinyImageFormat_TinyImageFormat_B8G8R8A8_SRGB: TinyImageFormat = 64;
pub const TinyImageFormat_TinyImageFormat_R8G8B8X8_UNORM: TinyImageFormat = 65;
pub const TinyImageFormat_TinyImageFormat_B8G8R8X8_UNORM: TinyImageFormat = 66;
pub const TinyImageFormat_TinyImageFormat_R16G16_UNORM: TinyImageFormat = 67;
pub const TinyImageFormat_TinyImageFormat_G16R16_UNORM: TinyImageFormat = 68;
pub const TinyImageFormat_TinyImageFormat_R16G16_SNORM: TinyImageFormat = 69;
pub const TinyImageFormat_TinyImageFormat_G16R16_SNORM: TinyImageFormat = 70;
pub const TinyImageFormat_TinyImageFormat_R16G16_UINT: TinyImageFormat = 71;
pub const TinyImageFormat_TinyImageFormat_R16G16_SINT: TinyImageFormat = 72;
pub const TinyImageFormat_TinyImageFormat_R16G16_SFLOAT: TinyImageFormat = 73;
pub const TinyImageFormat_TinyImageFormat_R16G16_SBFLOAT: TinyImageFormat = 74;
pub const TinyImageFormat_TinyImageFormat_R32_UINT: TinyImageFormat = 75;
pub const TinyImageFormat_TinyImageFormat_R32_SINT: TinyImageFormat = 76;
pub const TinyImageFormat_TinyImageFormat_R32_SFLOAT: TinyImageFormat = 77;
pub const TinyImageFormat_TinyImageFormat_A2R10G10B10_UNORM: TinyImageFormat = 78;
pub const TinyImageFormat_TinyImageFormat_A2R10G10B10_UINT: TinyImageFormat = 79;
pub const TinyImageFormat_TinyImageFormat_A2R10G10B10_SNORM: TinyImageFormat = 80;
pub const TinyImageFormat_TinyImageFormat_A2R10G10B10_SINT: TinyImageFormat = 81;
pub const TinyImageFormat_TinyImageFormat_A2B10G10R10_UNORM: TinyImageFormat = 82;
pub const TinyImageFormat_TinyImageFormat_A2B10G10R10_UINT: TinyImageFormat = 83;
pub const TinyImageFormat_TinyImageFormat_A2B10G10R10_SNORM: TinyImageFormat = 84;
pub const TinyImageFormat_TinyImageFormat_A2B10G10R10_SINT: TinyImageFormat = 85;
pub const TinyImageFormat_TinyImageFormat_R10G10B10A2_UNORM: TinyImageFormat = 86;
pub const TinyImageFormat_TinyImageFormat_R10G10B10A2_UINT: TinyImageFormat = 87;
pub const TinyImageFormat_TinyImageFormat_R10G10B10A2_SNORM: TinyImageFormat = 88;
pub const TinyImageFormat_TinyImageFormat_R10G10B10A2_SINT: TinyImageFormat = 89;
pub const TinyImageFormat_TinyImageFormat_B10G10R10A2_UNORM: TinyImageFormat = 90;
pub const TinyImageFormat_TinyImageFormat_B10G10R10A2_UINT: TinyImageFormat = 91;
pub const TinyImageFormat_TinyImageFormat_B10G10R10A2_SNORM: TinyImageFormat = 92;
pub const TinyImageFormat_TinyImageFormat_B10G10R10A2_SINT: TinyImageFormat = 93;
pub const TinyImageFormat_TinyImageFormat_B10G11R11_UFLOAT: TinyImageFormat = 94;
pub const TinyImageFormat_TinyImageFormat_E5B9G9R9_UFLOAT: TinyImageFormat = 95;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_UNORM: TinyImageFormat = 96;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_SNORM: TinyImageFormat = 97;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_UINT: TinyImageFormat = 98;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_SINT: TinyImageFormat = 99;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_SFLOAT: TinyImageFormat = 100;
pub const TinyImageFormat_TinyImageFormat_R16G16B16_SBFLOAT: TinyImageFormat = 101;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_UNORM: TinyImageFormat = 102;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_SNORM: TinyImageFormat = 103;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_UINT: TinyImageFormat = 104;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_SINT: TinyImageFormat = 105;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_SFLOAT: TinyImageFormat = 106;
pub const TinyImageFormat_TinyImageFormat_R16G16B16A16_SBFLOAT: TinyImageFormat = 107;
pub const TinyImageFormat_TinyImageFormat_R32G32_UINT: TinyImageFormat = 108;
pub const TinyImageFormat_TinyImageFormat_R32G32_SINT: TinyImageFormat = 109;
pub const TinyImageFormat_TinyImageFormat_R32G32_SFLOAT: TinyImageFormat = 110;
pub const TinyImageFormat_TinyImageFormat_R32G32B32_UINT: TinyImageFormat = 111;
pub const TinyImageFormat_TinyImageFormat_R32G32B32_SINT: TinyImageFormat = 112;
pub const TinyImageFormat_TinyImageFormat_R32G32B32_SFLOAT: TinyImageFormat = 113;
pub const TinyImageFormat_TinyImageFormat_R32G32B32A32_UINT: TinyImageFormat = 114;
pub const TinyImageFormat_TinyImageFormat_R32G32B32A32_SINT: TinyImageFormat = 115;
pub const TinyImageFormat_TinyImageFormat_R32G32B32A32_SFLOAT: TinyImageFormat = 116;
pub const TinyImageFormat_TinyImageFormat_R64_UINT: TinyImageFormat = 117;
pub const TinyImageFormat_TinyImageFormat_R64_SINT: TinyImageFormat = 118;
pub const TinyImageFormat_TinyImageFormat_R64_SFLOAT: TinyImageFormat = 119;
pub const TinyImageFormat_TinyImageFormat_R64G64_UINT: TinyImageFormat = 120;
pub const TinyImageFormat_TinyImageFormat_R64G64_SINT: TinyImageFormat = 121;
pub const TinyImageFormat_TinyImageFormat_R64G64_SFLOAT: TinyImageFormat = 122;
pub const TinyImageFormat_TinyImageFormat_R64G64B64_UINT: TinyImageFormat = 123;
pub const TinyImageFormat_TinyImageFormat_R64G64B64_SINT: TinyImageFormat = 124;
pub const TinyImageFormat_TinyImageFormat_R64G64B64_SFLOAT: TinyImageFormat = 125;
pub const TinyImageFormat_TinyImageFormat_R64G64B64A64_UINT: TinyImageFormat = 126;
pub const TinyImageFormat_TinyImageFormat_R64G64B64A64_SINT: TinyImageFormat = 127;
pub const TinyImageFormat_TinyImageFormat_R64G64B64A64_SFLOAT: TinyImageFormat = 128;
pub const TinyImageFormat_TinyImageFormat_D16_UNORM: TinyImageFormat = 129;
pub const TinyImageFormat_TinyImageFormat_X8_D24_UNORM: TinyImageFormat = 130;
pub const TinyImageFormat_TinyImageFormat_D32_SFLOAT: TinyImageFormat = 131;
pub const TinyImageFormat_TinyImageFormat_S8_UINT: TinyImageFormat = 132;
pub const TinyImageFormat_TinyImageFormat_D16_UNORM_S8_UINT: TinyImageFormat = 133;
pub const TinyImageFormat_TinyImageFormat_D24_UNORM_S8_UINT: TinyImageFormat = 134;
pub const TinyImageFormat_TinyImageFormat_D32_SFLOAT_S8_UINT: TinyImageFormat = 135;
pub const TinyImageFormat_TinyImageFormat_DXBC1_RGB_UNORM: TinyImageFormat = 136;
pub const TinyImageFormat_TinyImageFormat_DXBC1_RGB_SRGB: TinyImageFormat = 137;
pub const TinyImageFormat_TinyImageFormat_DXBC1_RGBA_UNORM: TinyImageFormat = 138;
pub const TinyImageFormat_TinyImageFormat_DXBC1_RGBA_SRGB: TinyImageFormat = 139;
pub const TinyImageFormat_TinyImageFormat_DXBC2_UNORM: TinyImageFormat = 140;
pub const TinyImageFormat_TinyImageFormat_DXBC2_SRGB: TinyImageFormat = 141;
pub const TinyImageFormat_TinyImageFormat_DXBC3_UNORM: TinyImageFormat = 142;
pub const TinyImageFormat_TinyImageFormat_DXBC3_SRGB: TinyImageFormat = 143;
pub const TinyImageFormat_TinyImageFormat_DXBC4_UNORM: TinyImageFormat = 144;
pub const TinyImageFormat_TinyImageFormat_DXBC4_SNORM: TinyImageFormat = 145;
pub const TinyImageFormat_TinyImageFormat_DXBC5_UNORM: TinyImageFormat = 146;
pub const TinyImageFormat_TinyImageFormat_DXBC5_SNORM: TinyImageFormat = 147;
pub const TinyImageFormat_TinyImageFormat_DXBC6H_UFLOAT: TinyImageFormat = 148;
pub const TinyImageFormat_TinyImageFormat_DXBC6H_SFLOAT: TinyImageFormat = 149;
pub const TinyImageFormat_TinyImageFormat_DXBC7_UNORM: TinyImageFormat = 150;
pub const TinyImageFormat_TinyImageFormat_DXBC7_SRGB: TinyImageFormat = 151;
pub const TinyImageFormat_TinyImageFormat_PVRTC1_2BPP_UNORM: TinyImageFormat = 152;
pub const TinyImageFormat_TinyImageFormat_PVRTC1_4BPP_UNORM: TinyImageFormat = 153;
pub const TinyImageFormat_TinyImageFormat_PVRTC2_2BPP_UNORM: TinyImageFormat = 154;
pub const TinyImageFormat_TinyImageFormat_PVRTC2_4BPP_UNORM: TinyImageFormat = 155;
pub const TinyImageFormat_TinyImageFormat_PVRTC1_2BPP_SRGB: TinyImageFormat = 156;
pub const TinyImageFormat_TinyImageFormat_PVRTC1_4BPP_SRGB: TinyImageFormat = 157;
pub const TinyImageFormat_TinyImageFormat_PVRTC2_2BPP_SRGB: TinyImageFormat = 158;
pub const TinyImageFormat_TinyImageFormat_PVRTC2_4BPP_SRGB: TinyImageFormat = 159;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8_UNORM: TinyImageFormat = 160;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8_SRGB: TinyImageFormat = 161;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8A1_UNORM: TinyImageFormat = 162;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8A1_SRGB: TinyImageFormat = 163;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8A8_UNORM: TinyImageFormat = 164;
pub const TinyImageFormat_TinyImageFormat_ETC2_R8G8B8A8_SRGB: TinyImageFormat = 165;
pub const TinyImageFormat_TinyImageFormat_ETC2_EAC_R11_UNORM: TinyImageFormat = 166;
pub const TinyImageFormat_TinyImageFormat_ETC2_EAC_R11_SNORM: TinyImageFormat = 167;
pub const TinyImageFormat_TinyImageFormat_ETC2_EAC_R11G11_UNORM: TinyImageFormat = 168;
pub const TinyImageFormat_TinyImageFormat_ETC2_EAC_R11G11_SNORM: TinyImageFormat = 169;
pub const TinyImageFormat_TinyImageFormat_ASTC_4x4_UNORM: TinyImageFormat = 170;
pub const TinyImageFormat_TinyImageFormat_ASTC_4x4_SRGB: TinyImageFormat = 171;
pub const TinyImageFormat_TinyImageFormat_ASTC_5x4_UNORM: TinyImageFormat = 172;
pub const TinyImageFormat_TinyImageFormat_ASTC_5x4_SRGB: TinyImageFormat = 173;
pub const TinyImageFormat_TinyImageFormat_ASTC_5x5_UNORM: TinyImageFormat = 174;
pub const TinyImageFormat_TinyImageFormat_ASTC_5x5_SRGB: TinyImageFormat = 175;
pub const TinyImageFormat_TinyImageFormat_ASTC_6x5_UNORM: TinyImageFormat = 176;
pub const TinyImageFormat_TinyImageFormat_ASTC_6x5_SRGB: TinyImageFormat = 177;
pub const TinyImageFormat_TinyImageFormat_ASTC_6x6_UNORM: TinyImageFormat = 178;
pub const TinyImageFormat_TinyImageFormat_ASTC_6x6_SRGB: TinyImageFormat = 179;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x5_UNORM: TinyImageFormat = 180;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x5_SRGB: TinyImageFormat = 181;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x6_UNORM: TinyImageFormat = 182;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x6_SRGB: TinyImageFormat = 183;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x8_UNORM: TinyImageFormat = 184;
pub const TinyImageFormat_TinyImageFormat_ASTC_8x8_SRGB: TinyImageFormat = 185;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x5_UNORM: TinyImageFormat = 186;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x5_SRGB: TinyImageFormat = 187;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x6_UNORM: TinyImageFormat = 188;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x6_SRGB: TinyImageFormat = 189;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x8_UNORM: TinyImageFormat = 190;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x8_SRGB: TinyImageFormat = 191;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x10_UNORM: TinyImageFormat = 192;
pub const TinyImageFormat_TinyImageFormat_ASTC_10x10_SRGB: TinyImageFormat = 193;
pub const TinyImageFormat_TinyImageFormat_ASTC_12x10_UNORM: TinyImageFormat = 194;
pub const TinyImageFormat_TinyImageFormat_ASTC_12x10_SRGB: TinyImageFormat = 195;
pub const TinyImageFormat_TinyImageFormat_ASTC_12x12_UNORM: TinyImageFormat = 196;
pub const TinyImageFormat_TinyImageFormat_ASTC_12x12_SRGB: TinyImageFormat = 197;
pub const TinyImageFormat_TinyImageFormat_CLUT_P4: TinyImageFormat = 198;
pub const TinyImageFormat_TinyImageFormat_CLUT_P4A4: TinyImageFormat = 199;
pub const TinyImageFormat_TinyImageFormat_CLUT_P8: TinyImageFormat = 200;
pub const TinyImageFormat_TinyImageFormat_CLUT_P8A8: TinyImageFormat = 201;
pub const TinyImageFormat_TinyImageFormat_R4G4B4A4_UNORM_PACK16: TinyImageFormat = 202;
pub const TinyImageFormat_TinyImageFormat_B4G4R4A4_UNORM_PACK16: TinyImageFormat = 203;
pub const TinyImageFormat_TinyImageFormat_R5G6B5_UNORM_PACK16: TinyImageFormat = 204;
pub const TinyImageFormat_TinyImageFormat_B5G6R5_UNORM_PACK16: TinyImageFormat = 205;
pub const TinyImageFormat_TinyImageFormat_R5G5B5A1_UNORM_PACK16: TinyImageFormat = 206;
pub const TinyImageFormat_TinyImageFormat_B5G5R5A1_UNORM_PACK16: TinyImageFormat = 207;
pub const TinyImageFormat_TinyImageFormat_A1R5G5B5_UNORM_PACK16: TinyImageFormat = 208;
pub const TinyImageFormat_TinyImageFormat_G16B16G16R16_422_UNORM: TinyImageFormat = 209;
pub const TinyImageFormat_TinyImageFormat_B16G16R16G16_422_UNORM: TinyImageFormat = 210;
pub const TinyImageFormat_TinyImageFormat_R12X4G12X4B12X4A12X4_UNORM_4PACK16: TinyImageFormat = 211;
pub const TinyImageFormat_TinyImageFormat_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: TinyImageFormat = 212;
pub const TinyImageFormat_TinyImageFormat_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: TinyImageFormat = 213;
pub const TinyImageFormat_TinyImageFormat_R10X6G10X6B10X6A10X6_UNORM_4PACK16: TinyImageFormat = 214;
pub const TinyImageFormat_TinyImageFormat_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: TinyImageFormat = 215;
pub const TinyImageFormat_TinyImageFormat_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: TinyImageFormat = 216;
pub const TinyImageFormat_TinyImageFormat_G8B8G8R8_422_UNORM: TinyImageFormat = 217;
pub const TinyImageFormat_TinyImageFormat_B8G8R8G8_422_UNORM: TinyImageFormat = 218;
pub const TinyImageFormat_TinyImageFormat_G8_B8_R8_3PLANE_420_UNORM: TinyImageFormat = 219;
pub const TinyImageFormat_TinyImageFormat_G8_B8R8_2PLANE_420_UNORM: TinyImageFormat = 220;
pub const TinyImageFormat_TinyImageFormat_G8_B8_R8_3PLANE_422_UNORM: TinyImageFormat = 221;
pub const TinyImageFormat_TinyImageFormat_G8_B8R8_2PLANE_422_UNORM: TinyImageFormat = 222;
pub const TinyImageFormat_TinyImageFormat_G8_B8_R8_3PLANE_444_UNORM: TinyImageFormat = 223;
pub const TinyImageFormat_TinyImageFormat_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: TinyImageFormat = 224;
pub const TinyImageFormat_TinyImageFormat_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: TinyImageFormat = 225;
pub const TinyImageFormat_TinyImageFormat_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: TinyImageFormat = 226;
pub const TinyImageFormat_TinyImageFormat_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: TinyImageFormat = 227;
pub const TinyImageFormat_TinyImageFormat_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: TinyImageFormat = 228;
pub const TinyImageFormat_TinyImageFormat_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: TinyImageFormat = 229;
pub const TinyImageFormat_TinyImageFormat_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: TinyImageFormat = 230;
pub const TinyImageFormat_TinyImageFormat_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: TinyImageFormat = 231;
pub const TinyImageFormat_TinyImageFormat_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: TinyImageFormat = 232;
pub const TinyImageFormat_TinyImageFormat_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: TinyImageFormat = 233;
pub const TinyImageFormat_TinyImageFormat_G16_B16_R16_3PLANE_420_UNORM: TinyImageFormat = 234;
pub const TinyImageFormat_TinyImageFormat_G16_B16_R16_3PLANE_422_UNORM: TinyImageFormat = 235;
pub const TinyImageFormat_TinyImageFormat_G16_B16_R16_3PLANE_444_UNORM: TinyImageFormat = 236;
pub const TinyImageFormat_TinyImageFormat_G16_B16R16_2PLANE_420_UNORM: TinyImageFormat = 237;
pub const TinyImageFormat_TinyImageFormat_G16_B16R16_2PLANE_422_UNORM: TinyImageFormat = 238;
pub type TinyImageFormat = ::std::os::raw::c_int;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Red: TinyImageFormat_LogicalChannel = 0;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Green: TinyImageFormat_LogicalChannel = 1;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Blue: TinyImageFormat_LogicalChannel = 2;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Alpha: TinyImageFormat_LogicalChannel = 3;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Depth: TinyImageFormat_LogicalChannel = 0;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_Stencil: TinyImageFormat_LogicalChannel = 1;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_0: TinyImageFormat_LogicalChannel = -1;
pub const TinyImageFormat_LogicalChannel_TinyImageFormat_LC_1: TinyImageFormat_LogicalChannel = -2;
pub type TinyImageFormat_LogicalChannel = ::std::os::raw::c_int;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_0: TinyImageFormat_PhysicalChannel = 0;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_1: TinyImageFormat_PhysicalChannel = 1;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_2: TinyImageFormat_PhysicalChannel = 2;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_3: TinyImageFormat_PhysicalChannel = 3;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_CONST_0: TinyImageFormat_PhysicalChannel = -1;
pub const TinyImageFormat_PhysicalChannel_TinyImageFormat_PC_CONST_1: TinyImageFormat_PhysicalChannel = -2;
pub type TinyImageFormat_PhysicalChannel = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TinyImageFormat_DecodeInput {
    pub __bindgen_anon_1: TinyImageFormat_DecodeInput__bindgen_ty_1,
    pub __bindgen_anon_2: TinyImageFormat_DecodeInput__bindgen_ty_2,
    pub pixelPlane2: *const ::std::os::raw::c_void,
    pub pixelPlane3: *const ::std::os::raw::c_void,
    pub pixelPlane4: *const ::std::os::raw::c_void,
    pub pixelPlane5: *const ::std::os::raw::c_void,
    pub pixelPlane6: *const ::std::os::raw::c_void,
    pub pixelPlane7: *const ::std::os::raw::c_void,
    pub pixelPlane8: *const ::std::os::raw::c_void,
    pub pixelPlane9: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TinyImageFormat_DecodeInput__bindgen_ty_1 {
    pub pixel: *const ::std::os::raw::c_void,
    pub pixelPlane0: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TinyImageFormat_DecodeInput__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TinyImageFormat_DecodeInput__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(TinyImageFormat_DecodeInput__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TinyImageFormat_DecodeInput__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TinyImageFormat_DecodeInput__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput__bindgen_ty_1>())).pixel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput__bindgen_ty_1),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TinyImageFormat_DecodeInput__bindgen_ty_1>())).pixelPlane0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput__bindgen_ty_1),
            "::",
            stringify!(pixelPlane0)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TinyImageFormat_DecodeInput__bindgen_ty_2 {
    pub lut: *const ::std::os::raw::c_void,
    pub pixelPlane1: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TinyImageFormat_DecodeInput__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<TinyImageFormat_DecodeInput__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(TinyImageFormat_DecodeInput__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<TinyImageFormat_DecodeInput__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(TinyImageFormat_DecodeInput__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput__bindgen_ty_2>())).lut as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput__bindgen_ty_2),
            "::",
            stringify!(lut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TinyImageFormat_DecodeInput__bindgen_ty_2>())).pixelPlane1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput__bindgen_ty_2),
            "::",
            stringify!(pixelPlane1)
        )
    );
}
#[test]
fn bindgen_test_layout_TinyImageFormat_DecodeInput() {
    assert_eq!(
        ::std::mem::size_of::<TinyImageFormat_DecodeInput>(),
        80usize,
        concat!("Size of: ", stringify!(TinyImageFormat_DecodeInput))
    );
    assert_eq!(
        ::std::mem::align_of::<TinyImageFormat_DecodeInput>(),
        8usize,
        concat!("Alignment of ", stringify!(TinyImageFormat_DecodeInput))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane6 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane7 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane8 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_DecodeInput>())).pixelPlane9 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_DecodeInput),
            "::",
            stringify!(pixelPlane9)
        )
    );
}
pub type TinyImageFormat_FetchInput = TinyImageFormat_DecodeInput;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TinyImageFormat_EncodeOutput {
    pub __bindgen_anon_1: TinyImageFormat_EncodeOutput__bindgen_ty_1,
    pub pixelPlane1: *const ::std::os::raw::c_void,
    pub pixelPlane2: *const ::std::os::raw::c_void,
    pub pixelPlane3: *const ::std::os::raw::c_void,
    pub pixelPlane4: *const ::std::os::raw::c_void,
    pub pixelPlane5: *const ::std::os::raw::c_void,
    pub pixelPlane6: *const ::std::os::raw::c_void,
    pub pixelPlane7: *const ::std::os::raw::c_void,
    pub pixelPlane8: *const ::std::os::raw::c_void,
    pub pixelPlane9: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TinyImageFormat_EncodeOutput__bindgen_ty_1 {
    pub pixel: *const ::std::os::raw::c_void,
    pub pixelPlane0: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TinyImageFormat_EncodeOutput__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TinyImageFormat_EncodeOutput__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(TinyImageFormat_EncodeOutput__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TinyImageFormat_EncodeOutput__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TinyImageFormat_EncodeOutput__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput__bindgen_ty_1>())).pixel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput__bindgen_ty_1),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput__bindgen_ty_1>())).pixelPlane0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput__bindgen_ty_1),
            "::",
            stringify!(pixelPlane0)
        )
    );
}
#[test]
fn bindgen_test_layout_TinyImageFormat_EncodeOutput() {
    assert_eq!(
        ::std::mem::size_of::<TinyImageFormat_EncodeOutput>(),
        80usize,
        concat!("Size of: ", stringify!(TinyImageFormat_EncodeOutput))
    );
    assert_eq!(
        ::std::mem::align_of::<TinyImageFormat_EncodeOutput>(),
        8usize,
        concat!("Alignment of ", stringify!(TinyImageFormat_EncodeOutput))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane6 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane7 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane8 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TinyImageFormat_EncodeOutput>())).pixelPlane9 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TinyImageFormat_EncodeOutput),
            "::",
            stringify!(pixelPlane9)
        )
    );
}
pub type TinyImageFormat_PutOutput = TinyImageFormat_EncodeOutput;
